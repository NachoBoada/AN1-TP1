Integrantes: Boada Ignacio, 95212; Franco Rivorati, 99411; Tarella (Noche); 2/5/2018

(Considerar que los puntos y subÃ­ndices se desarrollaban en archivos separados, por lo tanto, al juntarlos se pueden repetir nombres de funciones)
'''TP1-AN1'''
#!/usr/bin/env python 
# -*- coding: utf-8 -*- 
from __future__ import division #Para tener muchos digitos despues de la coma
import math #Para el logaritmo 

    #Declaro variables del problema
NP = 99411
g = 9.81
Lo =  (2 * 100000) / NP
Lo = round(Lo, 3)
K = 10
Mo = 100000 / NP
Mo = round(Mo, 3)
a = 1

#Esta es la funcion a la que se le deben hallar las raices
''' Fy = -2 * K * y * (1 - (Lo / (y**2 + a**2))**(1/2)) - m * g '''
def F(y, m = 0):
    return (-2 * K * y * (1 - (Lo / (y**2 + a**2)**(1/2))) - m * g)

def cte_asintotica_del_error(r_kmas1, r_k, r_kmenos1, p):
    return (abs((r_kmas1 - r_k)) / abs((r_k - r_kmenos1))**p)

def orden_de_convergencia(r_kmas1, r_k, r_kmenos1, r_kmenos2):
    return (math.log( abs((r_kmas1 - r_k))/ abs((r_k - r_kmenos1)) ) / math.log( abs((r_k - r_kmenos1))/ abs((r_kmenos1 - r_kmenos2)) ))


''' Punto 1 - Mo = 0 '''

#a) Regula-Falsi:
a_k = 0.1
b_k = 2
iteraciones = 90
r_kmenos2 = 0
r_kmenos1 = 0
r_k = 0 #Los inicializo para poder usarlo en cuando k>0, sino da error.
print "k\ta_k\tb_k\tF(a_k)\tF(b_k)\tr_kmas1\tDELTAr (r_k - r_k-1)\tDELTAr/r_k\tlambda\tp"
for k in range(iteraciones):
    r_kmas1 = a_k - ((b_k - a_k) / (F(b_k) - F(a_k))) * F(a_k)
    if k == 1:
        print "" #Para que no imprima todo junto porque cuando k=0 los delta r no existen.
    print k, '\t', a_k, '\t', b_k, '\t', F(a_k), '\t', F(b_k), '\t', r_kmas1,
    if (F(r_kmas1) == 0):
        raiz = r_kmas1
        delta_r_kmas1 = r_kmas1 - r_k
        err_rel = abs(delta_r_kmas1 / r_kmas1)
        print '\t', delta_r_kmas1, '\t', err_rel
        print "\nRAIZ HALLADA: ", raiz
        break
    elif (F(r_kmas1) * F(a_k) > 0):
        a_k = r_kmas1
    else:
        b_k = r_kmas1
    if k > 0:
        delta_r_kmas1 = r_kmas1 - r_k
        err_rel = abs(delta_r_kmas1 / r_kmas1)
        print '\t', delta_r_kmas1, '\t', err_rel,
        if k <= 2:
            print "" #Para que no imprima todo junto mientras no se pueden calcular p y lambda
        if k > 2: #Necesito 4 valores de r       
            p = orden_de_convergencia(r_kmas1, r_k, r_kmenos1, r_kmenos2)
            lamda = cte_asintotica_del_error(r_kmas1, r_k, r_kmenos1, p)
            print '\t', lamda, '\t', p
    r_kmenos2 = r_kmenos1
    r_kmenos1 = r_k
    r_k = r_kmas1



#b) Punto Fijo:
#Proximo, se define un punto perteneciente al intervalo que cumple con los requisitos
#xseed por la variable x y por ser la semilla del problema :)
xseed = 1.74559239637

iteraciones = 60
print "k\t\tx_k\t\tDELTAX (x_k - x_k-1)\t\tDELTAX/X_k"
x_k = xseed
for k in range(iteraciones):
    x_kmas1 = F(x_k)
    print k+1,'\t\t', x_kmas1,'\t\t', x_kmas1 - x_k,'\t\t', (x_kmas1 - x_k)/x_k
    if (x_kmas1 == x_k):
        raiz = x_kmas1
        print "RAIZ HALLADA: ", raiz
        break
    x_k = x_kmas1
	
	
	
#c) Newton-Raphson:
#Funcion a la que deseo hallar raiz
#Provisoria: utilizo raiz de x como ejemplo para probar que primero
#funciona el metodo implementado
def F(y,m=0):
    return (2*K*y*(1-(Lo/math.sqrt((y**2)+(a**2))))-(m*g))

#Derivada de la funcion que deseo hallar raiz
def Fprima(y):
    return ((-2*K*(1-(Lo/((y**2)+(a**2))**(1/2))))+(Lo*(-0.5*((((y**2)+(a**2))**(1/2))**(-3)))*2*K*y))

#Newton Raphson es un metodo de punto fijo con una funcion de punto fijo particular
#La funcion es g(y)
def G(y):
    return (y - (F(y)/Fprima(y)))
            
#Proximo, se define un punto perteneciente al intervalo que cumple con los requisitos
#xseed por la variable x y por ser la semilla del problema :)
xseed = 1
iteraciones = 60
print "k\t\tx_k\t\tDELTAX (x_k - x_k-1)\t\tDELTAX/X_k"
x_k = xseed
for k in range(iteraciones):
    x_kmas1 = G(x_k)
    print k+1,'\t\t', x_kmas1,'\t\t', x_kmas1 - x_k,'\t\t', (x_kmas1 - x_k)/x_k
    if (x_kmas1 == x_k):
        raiz = x_kmas1
        print "RAIZ HALLADA: ", raiz
        break
    x_k = x_kmas1
	
	
	
	
''' Punto 2 - M = 0.3 * Mo '''

#a) Regula-Falsi:

#RAIZ 1:
print "RAIZ 1:"
M = 0.3 * Mo
a_k = 0.1
b_k = 1
iteraciones = 90
r_kmenos2 = 0
r_kmenos1 = 0
r_k = 0 #Los inicializo para poder usarlo en cuando k>0, sino da error.
print "k\ta_k\tb_k\tF(a_k)\tF(b_k)\tr_kmas1\tDELTAr (r_k - r_k-1)\tDELTAr/r_k\tlambda\tp"
for k in range(iteraciones):
    r_kmas1 = a_k - ((b_k - a_k) / (F(b_k, M) - F(a_k, M))) * F(a_k, M)
    if k == 1:
        print "" #Para que no imprima todo junto porque cuando k=0 los delta r no existen.
    print k, '\t', a_k, '\t', b_k, '\t', F(a_k, M), '\t', F(b_k, M), '\t', r_kmas1,
    if (F(r_kmas1, M) == 0 or (F(r_kmas1, M) < 10**(-15) and F(r_kmas1, M) > -10**(-15))):
        raiz = r_kmas1
        delta_r_kmas1 = r_kmas1 - r_k
        err_rel = abs(delta_r_kmas1 / r_kmas1)
        print '\t', delta_r_kmas1, '\t', err_rel
        print "\nRAIZ HALLADA: ", raiz
        break
    elif (F(r_kmas1, M) * F(a_k, M) > 0):
        a_k = r_kmas1
    else:
        b_k = r_kmas1
    if k > 0:
        delta_r_kmas1 = r_kmas1 - r_k
        err_rel = abs(delta_r_kmas1 / r_kmas1)
        print '\t', delta_r_kmas1, '\t', err_rel,
        if k <= 2:
            print "" #Para que no imprima todo junto mientras no se pueden calcular p y lambda
        if k > 2: #Necesito 4 valores de r       
            p = orden_de_convergencia(r_kmas1, r_k, r_kmenos1, r_kmenos2)
            lamda = cte_asintotica_del_error(r_kmas1, r_k, r_kmenos1, p)
            print '\t', lamda, '\t', p
    r_kmenos2 = r_kmenos1
    r_kmenos1 = r_k
    r_k = r_kmas1
    
#RAIZ 2:
print "\nRAIZ 2:"
a_k = 1
b_k = 2
print "k\ta_k\tb_k\tF(a_k)\tF(b_k)\tr_kmas1\tDELTAr (r_k - r_k-1)\tDELTAr/r_k\tlambda\tp"
for k in range(iteraciones):
    r_kmas1 = a_k - ((b_k - a_k) / (F(b_k, M) - F(a_k, M))) * F(a_k, M)
    if k == 1:
        print "" #Para que no imprima todo junto porque cuando k=0 los delta r no existen.
    print k, '\t', a_k, '\t', b_k, '\t', F(a_k, M), '\t', F(b_k, M), '\t', r_kmas1,
    if (F(r_kmas1, M) == 0 or (F(r_kmas1, M) < 10**(-14) and F(r_kmas1, M) > -10**(-14))): #Con 10**-15 da error
        raiz = r_kmas1
        delta_r_kmas1 = r_kmas1 - r_k
        err_rel = abs(delta_r_kmas1 / r_kmas1)
        print '\t', delta_r_kmas1, '\t', err_rel
        print "\nRAIZ HALLADA: ", raiz
        break
    elif (F(r_kmas1, M) * F(a_k, M) > 0):
        a_k = r_kmas1
    else:
        b_k = r_kmas1
    if k > 0:
        delta_r_kmas1 = r_kmas1 - r_k
        err_rel = abs(delta_r_kmas1 / r_kmas1)
        print '\t', delta_r_kmas1, '\t', err_rel,
        if k <= 2:
            print "" #Para que no imprima todo junto mientras no se pueden calcular p y lambda
        if k > 2: #Necesito 4 valores de r       
            p = orden_de_convergencia(r_kmas1, r_k, r_kmenos1, r_kmenos2)
            lamda = cte_asintotica_del_error(r_kmas1, r_k, r_kmenos1, p)
            print '\t', lamda, '\t', p
    r_kmenos2 = r_kmenos1
    r_kmenos1 = r_k
    r_k = r_kmas1

#RAIZ 3:
print "\nRAIZ 3:"
a_k = -1
b_k = -3
print "k\ta_k\tb_k\tF(a_k)\tF(b_k)\tr_kmas1\tDELTAr (r_k - r_k-1)\tDELTAr/r_k\tlambda\tp"
for k in range(iteraciones):
    r_kmas1 = a_k - ((b_k - a_k) / (F(b_k, M) - F(a_k, M))) * F(a_k, M)
    if k == 1:
        print "" #Para que no imprima todo junto porque cuando k=0 los delta r no existen.
    print k, '\t', a_k, '\t', b_k, '\t', F(a_k, M), '\t', F(b_k, M), '\t', r_kmas1,
    if (F(r_kmas1, M) == 0 or (F(r_kmas1, M) < 10**(-14) and F(r_kmas1, M) > -10**(-14))): #Con 10**-15 da error.
        raiz = r_kmas1
        delta_r_kmas1 = r_kmas1 - r_k
        err_rel = abs(delta_r_kmas1 / r_kmas1)
        print '\t', delta_r_kmas1, '\t', err_rel
        print "\nRAIZ HALLADA: ", raiz
        break
    elif (F(r_kmas1, M) * F(a_k, M) > 0):
        a_k = r_kmas1
    else:
        b_k = r_kmas1
    if k > 0:
        delta_r_kmas1 = r_kmas1 - r_k
        err_rel = abs(delta_r_kmas1 / r_kmas1)
        print '\t', delta_r_kmas1, '\t', err_rel,
        if k <= 2:
            print "" #Para que no imprima todo junto mientras no se pueden calcular p y lambda
        if k > 2: #Necesito 4 valores de r       
            p = orden_de_convergencia(r_kmas1, r_k, r_kmenos1, r_kmenos2)
            lamda = cte_asintotica_del_error(r_kmas1, r_k, r_kmenos1, p)
            print '\t', lamda, '\t', p
    r_kmenos2 = r_kmenos1
    r_kmenos1 = r_k
    r_k = r_kmas1